/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  print?: Book;
}

export type Upload = any;

export interface Book {
  elements?: Array<Element | null>;
}

export interface Element {
  id: string;
  type: ElementType;
  index: number;
  text: string;
  title?: string;
  parent?: Element;
}

/** Use this to resolve interface type Element */
export type PossibleElementTypeNames = 'TableOfContents' | 'Chapter';

export interface ElementNameMap {
  Element: Element;
  TableOfContents: TableOfContents;
  Chapter: Chapter;
}

export enum ElementType {
  HALF_TITLE = 'HALF_TITLE',
  FRONTISPIECE = 'FRONTISPIECE',
  TITLE_PAGE = 'TITLE_PAGE',
  DEDICATION = 'DEDICATION',
  EPIGRAPH = 'EPIGRAPH',
  TABLE_OF_CONTENTS = 'TABLE_OF_CONTENTS',
  FOREWORD = 'FOREWORD',
  PREFACE = 'PREFACE',
  ACKNOWLEDGMENTS = 'ACKNOWLEDGMENTS',
  INTRODUCTION = 'INTRODUCTION',
  PROLOGUE = 'PROLOGUE',
  VOLUME = 'VOLUME',
  BOOK = 'BOOK',
  PART = 'PART',
  SECTION = 'SECTION',
  CHAPTER = 'CHAPTER',
  EPILOGUE = 'EPILOGUE',
  AFTERWORD = 'AFTERWORD',
  CONCLUSION = 'CONCLUSION',
  POSTSCRIPT = 'POSTSCRIPT',
  APPENDIX = 'APPENDIX',
  GLOSSARY = 'GLOSSARY',
  BIBLIOGRAPHY = 'BIBLIOGRAPHY',
  INDEX = 'INDEX',
  COLOPHON = 'COLOPHON',
  POSTFACE = 'POSTFACE'
}

export interface TableOfContentsElement {
  title: string;
  id: string;
}

export interface TableOfContents extends Element {
  id: string;
  type: ElementType;
  index: number;
  text: string;
  title?: string;
  parent?: Element;
  contents?: Array<TableOfContentsElement | null>;
}

export interface Chapter extends Element {
  id: string;
  type: ElementType;
  index: number;
  text: string;
  title?: string;
  parent?: Element;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Upload?: GraphQLScalarType;
  Book?: BookTypeResolver;
  Element?: {
    __resolveType: ElementTypeResolver
  };
  
  TableOfContentsElement?: TableOfContentsElementTypeResolver;
  TableOfContents?: TableOfContentsTypeResolver;
  Chapter?: ChapterTypeResolver;
}
export interface QueryTypeResolver<TParent = any> {
  print?: QueryToPrintResolver<TParent>;
}

export interface QueryToPrintArgs {
  file?: Upload;
  url?: string;
}
export interface QueryToPrintResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPrintArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BookTypeResolver<TParent = any> {
  elements?: BookToElementsResolver<TParent>;
}

export interface BookToElementsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ElementTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'TableOfContents' | 'Chapter';
}
export interface TableOfContentsElementTypeResolver<TParent = any> {
  title?: TableOfContentsElementToTitleResolver<TParent>;
  id?: TableOfContentsElementToIdResolver<TParent>;
}

export interface TableOfContentsElementToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableOfContentsElementToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableOfContentsTypeResolver<TParent = any> {
  id?: TableOfContentsToIdResolver<TParent>;
  type?: TableOfContentsToTypeResolver<TParent>;
  index?: TableOfContentsToIndexResolver<TParent>;
  text?: TableOfContentsToTextResolver<TParent>;
  title?: TableOfContentsToTitleResolver<TParent>;
  parent?: TableOfContentsToParentResolver<TParent>;
  contents?: TableOfContentsToContentsResolver<TParent>;
}

export interface TableOfContentsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableOfContentsToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableOfContentsToIndexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableOfContentsToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableOfContentsToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableOfContentsToParentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableOfContentsToContentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChapterTypeResolver<TParent = any> {
  id?: ChapterToIdResolver<TParent>;
  type?: ChapterToTypeResolver<TParent>;
  index?: ChapterToIndexResolver<TParent>;
  text?: ChapterToTextResolver<TParent>;
  title?: ChapterToTitleResolver<TParent>;
  parent?: ChapterToParentResolver<TParent>;
}

export interface ChapterToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChapterToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChapterToIndexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChapterToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChapterToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChapterToParentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
